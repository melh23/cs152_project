/* Parser */
/* parser.y */

%{
#include "heading.h"
int yyerror(char *s);
int yylex(void);
%}

%union{
  int		dval;
  string*	tag;
}

/*%start	input */

%token	<int_val>	INTEGER_LITERAL		/* %token: used to declare token/type name without associativity/precedence. Is also a type tag.*/

%start	program

%token	FUNCTION BEGIN_PARAMS END_PARAMS BEGIN_LOCALS END_LOCALS BEGIN_BODY END_BODY OF ARRAY
%token	IF THEN ENDIF ELSE WHILE DO FOR BEGINLOOP ENDLOOP CONTINUE READ WRITE AND OR NOT 
%token	TRUE FALSE RETURN MAIN INTEGER SEMICOLON COLON COMMA PLUS MINUS MULT DIV MOD
%token	L_PAREN R_PAREN EQUAL NEQ LT GT LTE GTE LSQBRACKET RSQBRACKET ASSIGN 
%token	NUM_FIRST_ERROR UNDERSCORE_ERROR UNEXPECETED_ERROR END 

%token	<tag>	IDENTIFIER
%token 	<dval> 	NUMBER
/*%token	<tag>	program function declaration statement bool_expr relation_and_expression relation_expression comp exp multipl_expr term var*/
/*
%type  	program
%type  	function
%type	declaration
%type	statement
%type	bool_expr
%type	relation_and_expression
%type	relation_expr
%type	comp
%type	exp
%type	multipl_expr
%type	term
%type	var
/*%type	exp			/* %type: When using %union to specify multiple value types, declare value type for each nonterminal symbol*/
/*%left	PLUS*/					/* %left: denotes a left associatve operator*/
/*%left	MULT*/
%type	<dval>	multipl_expr
%type	<dval>	exp 
%type 	<tag>	var term

%%

program:	/*empty*/
		| function 
		;
function:	FUNCTION IDENTIFIER SEMICOLON BEGIN_PARAMS fxn_dec END_PARAMS 
		BEGIN_LOCALS fxn_dec END_LOCALS
		BEGIN_BODY statement SEMICOLON fxn_statem END_BODY
		;

fxn_dec:	/*empty*/
		| declaration SEMICOLON fxn_dec
		;

fxn_statem:	/*empty*/
		| statement SEMICOLON fxn_statem
		;

declaration:    IDENTIFIER dec_comma SEMICOLON INTEGER
                | IDENTIFIER dec_comma SEMICOLON ARRAY LSQBRACKET NUMBER RSQBRACKET OF INTEGER
                ;

dec_comma:	/*empty*/
		| COMMA IDENTIFIER dec_comma
		;

statement:	var ASSIGN exp
		| IF bool_expr THEN statement SEMICOLON ENDIF
		| WHILE bool_expr BEGINLOOP statement SEMICOLON ENDLOOP
		| DO BEGINLOOP statement SEMICOLON ENDLOOP WHILE bool_expr
		| FOR var ASSIGN NUMBER SEMICOLON bool_expr SEMICOLON var ASSIGN exp BEGINLOOP statement SEMICOLON ENDLOOP
		| READ var
		| CONTINUE
		| RETURN exp
		;

bool_expr:      relation_and_expression {printf("bool_expr -> relation_and_expression");}
                | relation_and_expression OR relation_and_expression {printf("bool_expr -> relation_expression OR relation_and_expression\n");}
                ;

relation_and_expression:        relation_expr {printf("relation_expression -> relation_expr\n");}
                                | relation_expr AND relation_expr {printf("relation_and_expression -> relation_expr AND relation_expr\n");}
                                ;

relation_expr:  NOT rel_exp {printf("relation_expr -> NOT rel_exp_not\n");}
		| rel_exp_not {printf("relation_expr -> rel_exp_not\n");}
		;


rel_exp_not:    | exp comp exp {printf("rel_exp_not -> exp comp exp\n");}
                | TRUE {printf("rel_exp_not -> TRUE\n");}
                | FALSE {printf("rel_exp_not -> FALSE\n");}
                | L_PAREN bool_expr R_PAREN {printf("rel_exp_not -> L_PAREN bool_expr R_PAREN\n");}
                ;

comp:           EQUAL {printf("comp -> EQUAL\n");}
		| NEQ {printf("comp -> NEQ\n");}
		| LT {printf("comp -> LT\n");}
		| GT {printf("comp -> GT\n");}
		| LTE {printf("comp -> LTE\n");}
		| GTE {printf("comp -> GTE\n");}
		;

exp:		multipl_expr {$$ = $$; printf("exp -> multipl_expr\n");}
		| multipl_expr PLUS multipl_expr {$$ = $1 + $3; printf("exp -> multipl_expr PLUS multipl_expr\n");}
		| multipl_expr MINUS multipl_expr {$$ = $1 - $3; printf("exp -> multipl_expr MINUS multipl_expr\n");}
		;

multipl_expr:	term {$$ = $1; printf("multiple_expr -> term\n");}
		| term MULT term {$$ = $1 * $3; printf("multipl_expr -> term MULT term\n");}
		| term DIV term {$$ = $1 / $3; printf("multipl_expr -> term DIV term\n");}
		| term MOD term {$$ = $1 % $3; printf("multipl_expr -> term MOD term\n");}
		;

term:		MINUS term_minus {$$ = $2; printf("term -> MINUS term_minus\n");}	/* do we need to make a variable lookup table? Didn't the prof. say something about that in class? Can't remember... */
		| term_minus {printf("term -> term_minus\n");}
		| IDENTIFIER L_PAREN exp R_PAREN {$$ = $3; printf("term -> identifier L_PAREN exp R_PAREN"\n);}
		;
		
term_minus:	| var {$$ = $1; printf("term_minus -> var\n");}
		| NUMBER {$$ = $1; printf("term -> NUMBER\n");}
		;
term_exp:	/*empty*/
		| exp term_expr term_exp {printf("term_exp -> exp term_expr term_exp\n");}
		;

term_expr:	/*empty*/
		| COMMA exp {printf("term_expr -> COMMA exp");}
		;		
		

var:		IDENTIFIER {$$ = $1; printf("var - > indentifier\n" );}
		| IDENTIFIER LSQBRACKET exp RSQBRACKET {$$ = $1; printf("var - > identifier LSQBRACKET exp RSQBRACKET\n");}
		;



%%

int yyerror(string s)
{
  extern int yylineno;	// defined and maintained in lex.c
  extern char *yytext;	// defined and maintained in lex.c
  
  cerr << "ERROR: " << s << " at symbol \"" << yytext;
  cerr << "\" on line " << yylineno << endl;
  exit(1);
}

int yyerror(char *s)
{
  return yyerror(string(s));
}

